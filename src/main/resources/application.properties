spring.profile.value=develop-mysql

spring.datasource.url=jdbc:mysql://us-cdbr-iron-east-01.cleardb.net/heroku_e0109a122bd37db?reconnect=true&serverTimezone=Asia/Seoul&useSSL=false&useUnicode=true&characterEncoding=UTF-8
spring.datasource.driverClassName=com.mysql.jdbc.Driver
spring.datasource.username =  b3fd2957584cfe
spring.datasource.password =  23ed06fc
spring.datasource.sql-script-encoding=UTF-8

#최대 풀 크기
spring.datasource.tomcat.max-active=200
#cp에 반납할 때 최대,최소로 유지될 수 있는 커넥션 개수
spring.datasource.dbcp2.max-idle=200
spring.datasource.dbcp2.min-idle=200
#어플리케이션 레벨에서 dbcp의 커넥션을 획득하기 위해 기다리는 시간(중요). max-wait과 같음.
spring.datasource.dbcp2.max-wait-millis= 3000
#evictor 스레드 동작시 커넥션의 유휴 시간을 확인해 초과시 커넥션 제거
spring.datasource.dbcp2.min-evictable-idle-time-millis=600000

# 아래를 추가하해야 만약 있으면... schema.sql(스키마 생성 관련 sql), data.sql(데이터 관련 sql)-> 스키마, 데이터삽입 잘 됨
# JPA-애플리케이션을 만든다면 schema.sql을 사용할지(initialization으로-always/never) spring.jpa.hibernate.ddl-auto를 할지에 따라 하나를 disabled 처리를 해야 함.
# ㄴ 근데 난 여기서 data.sql만 쓸거라(데이터 삽입만) 아래 스키마 자동생성이랑은 따로 봐도됨)
spring.datasource.initialization-mode=never
# data.sql에 없는 작업하던 data까지 들어있었던건 cleardb가 클라우드형이라 내 로컬에서 볼땐 ''클라우드에서 가져온걸 보여줘서'' 그런 것 같음.


# 스키마 자동생성 전략- 나는 따로 shema.sql이 없기때문에 맨처음엔 create로 만들고, 이후엔 스키마 안 건들어도됨.
# create하면 자꾸 데이터도 초기화되니까
spring.jpa.hibernate.ddl-auto = update
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.generate-ddl=false
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database=mysql
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect

spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

spring.devtools.livereload.enabled=true
server.port=${PORT:8080}

server.error.include-stacktrace= never

spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
spring.http.encoding.force=true